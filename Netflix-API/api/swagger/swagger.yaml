swagger: "2.0"
info:
  version: "0.0.1"
  title: Netflix
host: localhost:10010
schemes:
  - http
basePath: /
consumes:
  - application/json
produces:
  - application/json
paths:
  /users:
    x-swagger-router-controller: user
    post:
      tags:
      - "user"
      summary: "Create a new user"
      description: "Create user"
      operationId: createUser
      parameters:
        - name: "body"
          in: "body"
          description: "Create a new user"
          required: true
          schema:
              $ref: "#/definitions/User"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/User"
        default:
          description: "Error"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /users/user:
    x-swagger-router-controller: user
    delete:
      tags:
      - "Admin"
      summary: "Delete a user by Title"
      description: ""
      operationId: deleteUserByUsername
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The username of the user you want to delete"
        required: true
        type: string
      responses:
        "200":
          description: "User successfully deleted"
          schema:
            type: string
        "400":
          description: "Invalid username"
     
  /users/login:
    x-swagger-router-controller: user
    post:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: loginUser
      produces:
      - "application/json"
      parameters:
        - in: "body"
          name: "user"
          description: "The user to create."
          schema:
            type: object
            required:
              - username
              - password
            properties:
              username:
                type: string
                example: "Béla"
              password:
                type: string
                example: "krumpli"
      responses:
        "200":
          description: "Successfully logged in"
          schema:
            type: object
            properties:
              message:
                type: string
                example: Successful login
              session_key:
                type: integer
                example: 37
              
        "400":
          description: "Invalid username/password supplied"
          
  /users/logout:
    x-swagger-router-controller: user
    get:
      tags:
      - "user"
      summary: "Logs out the User"
      description: "Logs out the user"
      operationId: logoutUser
      responses:
        "200":
          description: "Successfully logged out"
          schema:
            type: string
        default:
          description: "Error"
          schema:
            $ref: "#/definitions/ErrorResponse"

  
  /queue:
    x-swagger-router-controller: video
    post:
      tags:
      - "Video"
      summary: "Add a video to your queue"
      description: ""
      operationId: addVideoToQueue
      consumes:
      - "application/octet-stream"
      produces:
      - "application/json"
      parameters:
      - name: "videoTitle"
        in: "query"
        description: "The Title of the video"
        required: true
        type: string
      responses:
        "200":
          description: "successful operation"
          schema:
            type: string
        "400":
          description: "Video successfully added to your queue"
          schema:
            $ref: "#/definitions/ErrorResponse"

    get:
      tags:
      - "Video"
      summary: "List all the videos in your queue"
      description: ""
      operationId: listVideosInQueue
      produces:
      - "application/json"
      responses:
        "200":
          description: "Queue successfully listed"
          schema:
            type: array
            items:
              $ref: "#/definitions/Video"
        "400":
          description: "Invalid video title"
          schema:
            $ref: "#/definitions/ErrorResponse"

      
  /videos/video:
    x-swagger-router-controller: video
    get:
      tags:
      - "Video"
      summary: "Get a video by Title"
      description: ""
      operationId: videoByTitle
      produces:
      - "application/json"
      parameters:
      - name: "videoTitle"
        in: "query"
        description: "The Title of the video"
        required: true
        type: string
      responses:
        "200":
          description: "Video found"
          schema:
            $ref: "#/definitions/Video"
        "400":
          description: "Invalid video title"
          schema:
            $ref: "#/definitions/ErrorResponse"

    patch:
      tags:
      - "Admin"
      summary: "Update a video"
      description: ""
      operationId: updateVideo
      produces:
      - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "Update the category or the type of a video by title. You can't update the title. The type of the video is either movie or series."
          required: false
          schema:
              $ref: "#/definitions/Video"
      responses:
        "200":
          description: "Video successfully updated"
          schema:
            $ref: "#/definitions/Video"
        "400":
          description: "Video title does not exist"

    delete:
      tags:
      - "Admin"
      summary: "Delete a video by Title"
      description: ""
      operationId: deleteVideoByTitle
      produces:
      - "application/json"
      parameters:
      - name: "videoTitle"
        in: "query"
        description: "The Title of the video you want to delete"
        required: true
        type: string
      responses:
        "200":
          description: "Video successfully deleted"
          schema:
            type: string
        "400":
          description: "Invalid video title"

  /videos:
    x-swagger-router-controller: video
    post:
      tags:
      - "Admin"
      summary: "Add a new video"
      description: ""
      operationId: addVideo
      produces:
      - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: type can be either movie or series
          required: true
          schema:
              $ref: "#/definitions/Video"
      responses:
        "200":
          description: "Video successfully added."
          schema:
            $ref: "#/definitions/Video"
        "400":
          description: "Video title already in use"

    get:
      tags:
      - "Video"
      summary: "List all available videos"
      description: ""
      operationId: getVideos
      produces:
      - "application/json"
      responses:
        "200":
          description: "Videos successfully listed."
          schema:
            type: array
            items:
              $ref: "#/definitions/Video"
        "400":
          description: "Unexpected error"

    
definitions:
  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string
        description: "The error that occurred"
        example: "Invalid username/password"
  User:
    type: object
    properties:
      username:
        type: string
        description: "Name of the user"
        example: "Béla"
      password:
        type: string
        description: "Password of the user"
        example: "krumpli"
  Video:
    type: object
    properties:
      title:
        type: string
        description: "The title of the video"
        example: "The Lord of the Rings"
      category:
        type: string
        description: "The category of the video"
        example: "Entertaining"
      type:
        type: string
        enum: [movie, series]
        description: "The type of the video either movie or series"
        example: "movie"

